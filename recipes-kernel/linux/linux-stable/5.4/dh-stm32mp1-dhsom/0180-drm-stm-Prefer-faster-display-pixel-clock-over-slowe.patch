From 852e409b244eac30544c718a3be3f1d101f880b8 Mon Sep 17 00:00:00 2001
From: Marek Vasut <marex@denx.de>
Date: Wed, 9 Sep 2020 20:54:44 +0200
Subject: [PATCH] [RFC] drm/stm: Prefer faster display pixel clock over slower
 ones
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

If the delta between requested pixelclock and resulting pixelclock
is larger than the delta between requested pixelclock and the next
step in available pixelclock (limited to 10% of pixelclock to avoid
too much out-of-specification operation), use the faster pixelclock.

This fixes the condition where the resulting pixelclock is much
slower than the lowest clock rate supported by the display, while
the next available pixelclock are just slightly faster than the
highest clock rate supported by the display. Using the lower clock
rate leads e.g. to subtle artifacts barely visible on the display,
like flickering pixels. Using slightly faster clock leads to no
such effect.

Upstream-Status: Submitted [https://patchwork.kernel.org/patch/11766067/]
Signed-off-by: Marek Vasut <marex@denx.de>
Cc: Alexandre Torgue <alexandre.torgue@st.com>
Cc: Benjamin Gaignard <benjamin.gaignard@st.com>
Cc: Maxime Coquelin <mcoquelin.stm32@gmail.com>
Cc: Philippe Cornu <philippe.cornu@st.com>
Cc: Vincent Abriou <vincent.abriou@st.com>
Cc: Yannick Fertr√© <yannick.fertre@st.com>
Cc: dri-devel@lists.freedesktop.org
Cc: linux-arm-kernel@lists.infradead.org
Cc: linux-stm32@st-md-mailman.stormreply.com
---
 drivers/gpu/drm/stm/ltdc.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/drivers/gpu/drm/stm/ltdc.c b/drivers/gpu/drm/stm/ltdc.c
index 51571f7246ab..c3dd94adff54 100644
--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -515,6 +515,8 @@ static bool ltdc_crtc_mode_fixup(struct drm_crtc *crtc,
 	struct ltdc_device *ldev = crtc_to_ltdc(crtc);
 	struct drm_device *ddev = crtc->dev;
 	int rate = mode->clock * 1000;
+	int rate_min = clk_round_rate(ldev->pixel_clk, rate);
+	int rate_max = clk_round_rate(ldev->pixel_clk, rate + (rate / 10));
 	bool runtime_active;
 	int ret;
 
@@ -523,6 +525,23 @@ static bool ltdc_crtc_mode_fixup(struct drm_crtc *crtc,
 	if (runtime_active)
 		pm_runtime_put_sync(ddev->dev);
 
+	/*
+	 * If the delta between requested pixelclock and resulting pixelclock
+	 * is larger than the delta between requested pixelclock and the next
+	 * step in available pixelclock (limited to 10% of pixelclock to avoid
+	 * too much out-of-specification operation), use the faster pixelclock.
+	 *
+	 * This fixes the condition where the resulting pixelclock is much
+	 * slower than the lowest clock rate supported by the display, while
+	 * the next available pixelclock are just slightly faster than the
+	 * highest clock rate supported by the display. Using the lower clock
+	 * rate leads e.g. to subtle artifacts barely visible on the display,
+	 * like flickering pixels. Using slightly faster clock leads to no
+	 * such effect.
+	 */
+	if (rate - rate_min > rate_max - rate)
+		rate = rate_max;
+
 	if (clk_set_rate(ldev->pixel_clk, rate) < 0) {
 		DRM_ERROR("Cannot set rate (%dHz) for pixel clk\n", rate);
 		return false;
-- 
2.28.0

